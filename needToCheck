
install 
npm
express js
body-parser


Express.js is the backend part of the MEAN and manages routing, sessions, HTTP requests, error handling, etc.

ejs =  EJS is a simple templating language that lets you generate HTML markup with plain JavaScript. No religiousness about how to organize things. No reinvention of iteration and control-flow. It's just plain JavaScript.

express route parameter

//------------------------------------------------//
UNDERSTANDING MONGODB

* download mongoDB - DONE
* Config mongoDB
    * install - done
    * mv folder to usr - done
    * add PATH - done
    * create de /data/db folder - done
    * give the privilege to access the data/db folder - done
    * verify if was install - done (mongod --version)
* config terminal mongodb
    * install homebrew - done
    * Instal mongo db using brew - done
    * understand how to use db - progress
    * create new db - done
    * commands
        * switch between dbs - use db_name - ok
        * list db - show dbs - ok
        * to get help - help - ok
        * to know in which db I'm - db - ok 
        * to delete dtabase 
            * access db - use db_name 
            * db.dropDatabase()

* FILTER: https://www.mongodb.com/docs/manual/reference/operator/query/#query-selectors
* CRUD mongodb
    * CREATE 
        * db.collectionName.insertOne({
            name: "Alice",
            age: 34,
            interesting: ["Study","Kdrama"]
        })
        * db.collectionName.insertMany([
            { name: "Joao",
            age: 30,
            interesting: ["Study","Kdrama"]},
            { name: "Pedro",
            age: 31,
            interesting: ["Anoying","Game"]}
        ])
    * READ
        * db.collectionName.find().
        * db.collectionName.find({"KeyName":"Value"})
        * https://www.mongodb.com/docs/manual/reference/operator/query/#query-selectors
        * https://www.mongodb.com/docs/manual/core/document/#query-filter-documents
        * db.collectionName.find({"KeyName":"Value"}) return everything
        * specify field you want to return {second parameter}
            * db.collectionName.find({_id: 1}, {name:1}) return the _id value and the name value
            * db.collectionName.find({_id:1}, {name: 1, _id:0}) return only the name.
    * UPDATE
        * To update a single document, use db.collection.updateOne().
        * To update multiple documents, use db.collection.updateMany().
        * To replace a document, use  db.collection.replaceOne().
        * create/update new field and value $set
            * db.collectionName.updateOne({_id:1}, {$set: {fieldName: value}}) 
                * first is which element do you want to change and second is the new field.
    * DELETE
        * To delete multiple documents, use  db.collection.deleteMany().
        * To delete a single document, use  db.collection.deleteOne().
        * db.collectionName.deleteOne({"KeyName":"Value"})
        * db.collectionName.deleteMany({"KeyName":"Value"})
    * RELATIONSHIP BETWEEN BDS. 
        * inside your collection you create the field that receive an array field: [{...}, {....}, {...}]
            * db.collectionName.insertOne({
                _id: 1,
                name: "Pen",
                price: 0.80,
                //the embed field
                review: [
                    {
                        autorName: "Joao",
                        rating: 4.5,
                        review: "The best pen ever."
                    }
                ]
            })



//PROJECT

* start NATIVE DRIVER mongoDB inside the project
    * https://www.mongodb.com/docs/drivers/node/current/quick-start/download-and-install/
    * create the project
        * inside the project
            * create the app.js file
            * initialize the npm (npm init -y)
            * install mongodb driver (npm i mongodb)
    * Connect db in project
        * https://www.mongodb.com/docs/drivers/node/current/quick-start/connect-to-mongodb/
        * https://www.geeksforgeeks.org/native-mongodb-driver-for-node-js/
        * // Importing MongoClient from mongodb driver
            const { MongoClient } = require('mongodb');

            // Connecting to a local port
            const uri = 'mongodb://127.0.0.1:27017';

            const client = new MongoClient(uri, {
                useUnifiedTopology: true,
                useNewUrlParser: true
            });

            connect();

            // ESNext syntax using async-await
            async function connect() {
                try {
                    await client.connect();
                    const db = client.db('cars');
                    console.log(
                `Successfully connected to db ${db.databaseName}`);
                }
                catch (err) {
                    console.error(`we encountered ${err}`);
                }
                finally {
                    client.close();
                }
            }


* to run the app.js
    * node app.js on terminal

* start MONGOOSE DRIVER mongodb inside a project
    * https://www.mongodb.com/developer/languages/javascript/getting-started-with-mongodb-and-mongoose/
    * create the project (if doens't have one)
        * inside the project
            * create the app.js file
            * initialize the npm (npm init -y)
            * install mongodb mongoose driver (npm i mongoose)

* connect mongoose
    * const mongoose = require('mongoose');
      mongoose.connect('mongodb://127.0.0.1:27017/dbName', {useNewUrlParser: true}); OR
      mongoose.connect('mongodb:localhost:27017/dbName', {useNewUrlParser: true}); 


* mongoose SCHEMA
    * nameSchema = name+Schema => fruitsSchema or listSchema... 
    * const fruitSchema = new mongoose.Schema({
        name: String,
        rating: Number,
        reviews: String
    });

* MODEL create collection 
    * const NameModel = mongoose.model("SingularNameCollection",nameSchema);
        * const Fruit = mongoose.model("Fruit",fruitSchema);

* create the document from the MODEL
    * const nameDocument = new NameModel({})
        * const fruit = new Fruit({
            name: "Apple",
            rating: 7,
            reviews: "No bad but no good."
        })

* SAVE() the document
    * nameDocument.save();
        * fruit.save();

* insertmany()
    * const orange = new Fruit({
        ....
    })
     * const banana = new NameFruitModel({
        ....
    })
    Fruit.insertMany([orange, banana], function(err){
        if(err){
            console.log(err)
        }else{
            console.log("Succesfully saved all the fruits to fruitDB)
        }
    })

* READ
    * NameModel.find(function(err, nameCallBack){})
        * Fruit.find(function(err, fruits){
            if(err){
                console.log(err)
            }else{
                console.log(fruits)
            }
        })
    
* close the connection database
    * inside the function of last call and after it is done 
        * mongoose.connection.close()

* VALIDATION nameCollum: {}
    * https://mongoosejs.com/docs/validation.html
    * const fruitSchema = new mongoose.Schema({
        name: {
            type: String,
            required: [true, "Please, insert your name!"]
        }
        rating: {
            type: Number,
            min:1,
            max: 5
        },
        reviews: String
    });

* UPDATE
    * NameModel.updateOne({conditionFiled: value}, {whatYouWantToUpdateField: newValue}, function(err){
        if(err){
            console.log(err)
        }else{
            console.log("Succesfully update file")
        }
    })
        * Fruit.updateOne({_id:3},{name: "Peach}, function(err){
            if(err){
               console.log(err)
            }else{
                console.log("Succesfully update document")
            }
        })

* DELETE
    * deleteOne()
        * NameModel.deleteOne({conditionFiled: value}, function(err){
            if(err){
                console.log(err)
            }else{
                console.log("Succesfully deleted element")
            }
        })
            * Fruit.deleteOne({name: "Peach"},function(err){
                if(err){
                console.log(err)
                }else{
                    console.log(" Succesfully deleted the document")
                }
            })
    * deleteMany() -> the second parameter is not a must.
        * NameModel.deleteMany({conditionFiled: value, secondCondition: {filter: value}}, function(err){
            if(err){
                console.log(err)
            }else{
                console.log("Succesfully deleted element")
            }
        })
            * Fruit.deleteMany({name: "Peach", rating: {$lt: 3}},function(err){
                if(err){
                console.log(err)
                }else{
                    console.log(" Succesfully deleted the document")
                }
            })
        
* RELATIONSHIP 
    * nameField: nameSchema
        * const personSchema = new mongoose.Schema({
            name: String,
            favoriteFruit: fruitSchema /here you connect this field to the fruitSchema/
        }) 